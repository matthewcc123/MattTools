@page "/ULIMerge"
@inject MainLayoutService mainLayoutService
@inject ULIMergerService mergerService;
@using System.Diagnostics;
@using MattTools.Data;

<!--Bottom Text-->
@if (mergerService.MergePath != null)
{
    <div class="bottomRightText">
        <p>@mergerService.MergePath.Remove(mergerService.MergePath.Length - 1, 1)</p>
    </div>
}

<div class="content animate flyFadeIn">
    <div class="mainHeader" style="margin-top: 32px;">
        <TitleText icon="icon/mergeIcon.svg" text="ULI Merger"/>
        <div class="flexHorizontal" style="gap: 8px">
            <p style="margin-right: 8px">@FileCounter</p>
            <button @onclick="PickInvoice">Select</button>
            <button @onclick="MergeInvoice">Merge</button>
        </div>
    </div>

    <!--Table-->

    <div class="listPanel">
        <table>

            <thead>
                <tr>
                    <th>No</th>
                    <th>Invoice Number</th>
                    <th>Tax Number</th>
                    <th>Status</th>
                </tr>
            </thead>

            <tbody>

                @for (int i = 0; i < mergerService.MergeFiles.Count; i++)
                {
                    var file = mergerService.MergeFiles[i];

                    <tr class="@Status(file.mergeStatus)">
                        <td>@(i + 1)</td>
                        <td>@file.InvoiceNumber</td>
                        <td>@mergerService.TaxNumberFormat(file.TaxNumber)</td>
                        <td>
                            <div class="tooltip">
                                <div class="tooltipText">
                                    <p>Invoice File : @((MarkupString)MarkText(file.InvoiceFileName, file.TaxNumber))</p>
                                    <p>Tax File : @((MarkupString)MarkText(file.TaxFileName, file.TaxNumber))</p>
                                </div>
                                @file.Status
                            </div>
                        </td>
                    </tr>
                }

            </tbody>

        </table>
    </div>

</div>

<style>
    mark {
        background-color: #0066FF;
        color: #FFFF;
    }
</style>

@code {

    public string FileCounter
    {
        get
        {
            if (mergerService.InvoicePaths.Count > 0 || mergerService.TaxPaths.Count > 0)
            {
                return $"{mergerService.InvoicePaths.Count} Invoice Found | {mergerService.TaxPaths.Count} Tax Found";
            }
            else
            {
                return "Select Invoice and Tax.";
            }
        }

    }

    public string MarkText(string text, string markText)
    {
        return text.Replace(markText, "<mark>" + markText + "</mark>");
    }

    public string Status(MergeStatus status)
    {
        switch (status)
        {
            default:
                return "";
            case MergeStatus.NotMatch:
                return "error";
            case MergeStatus.Ready:
                return "";
            case MergeStatus.Merged:
                return "succes";
        }
    }

    public async Task PickInvoice()
    {

        mainLayoutService.ShowLoading("Selecting File");

        await Task.Run(mergerService.PickInvoices);

        mainLayoutService.HideLoading();

        if (mergerService.Errors.Count > 0)
        {
            string errorText = "";

            for (int i = 0; i < mergerService.Errors.Count; i++)
            {
                errorText += "&#8226; " + mergerService.Errors[i] + "<br/>";
            }

            mainLayoutService.CreateDialog("Error", errorText);
        }

    }

    public async Task MergeInvoice()
    {

        mainLayoutService.ShowLoading("Merging");

        await Task.Run(mergerService.MergeInvoices);

        mainLayoutService.HideLoading();

    }

}
