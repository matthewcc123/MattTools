@page "/Rossum"
@inject MainLayoutService mainLayoutService;
@inject IRossumService rossumService;
@inject RossumExtractorService  rossumExtractor; 
@using MattTools.Data;
@using System.Diagnostics;


@if (rossumExtractor.LoggedIn)
{
    <!--Bottom Text-->
    <div class="bottomRightText">
        <pre>@(BottomStatus())</pre>
    </div>

    
    <div class="content animate flyFadeIn">

        <!--Header-->
        <div class="mainHeader" style="margin-top: 32px;">
            <TitleText icon="icon/rossumIcon.svg" text="Rossum Extractor"/>
            <div class="flexHorizontal" style="gap: 8px">
                <p style="margin-right: 8px">@rossumExtractor.LoginCache.username</p>
                <button @onclick="Logout">Log Out</button>
            </div>
        </div>

        <div class="sidePanel">
            <label>Workspace</label>
            <Dropdown Item="@(rossumExtractor.WorkspaceList)" Value="@(rossumExtractor.WorkspaceValue)" OnChangeValue="UpdateWorkspaceValue" />
            <label>Queue</label>
            <Dropdown Item="@(rossumExtractor.QueueList)" Value="@(rossumExtractor.QueueValue)" OnChangeValue="UpdateQueueValue" />
            <label>Search</label>
            <div class="textareaContainer" style="width: 100%; height: 128px;">
                <textarea style="height: 128px; width: 100%; resize: none;" @bind="rossumExtractor.Filter"/>
                <div class="textareaFocus"></div>
            </div>
            <button style="width: 100%; height: 44px;" @onclick="FindDocument">Search</button>
            <button style="width: 100%; height: 44px;">Extract Json</button>
            <button style="width: 100%; height: 44px;">Extract Pdf</button>
        </div>

        <div class="listPanel">
            <table>

                <thead>
                    <tr>
                        <th style="width: 45px"><Checkbox Check="@CheckAllAnnotationSelected()" OnClick="SelectAllAnnotation"/></th>
                        <th style="width: 45px">No</th>
                        <th>Name</th>
                        <th>Status</th>
                        <th>Uploaded At</th>
                    </tr>
                </thead>

                <tbody>

                    @for (int i = 0; i < rossumExtractor.AnnotationDataList.Count; i++)
                    {

                        var annotation = rossumExtractor.AnnotationDataList[i];
                        var index = i;

                        <tr class="@Status(annotation.status)">
                            <td style="width: 45px"><Checkbox Disabled="@(Status(annotation.status) != "confirmed" && Status(annotation.status) != "review")" Check="@annotation.selected" OnClick="@(e => SelectAnnotation(index))" /></td>
                            <td style="width: 45px">@(i + 1)</td>
                            <td>@annotation.fileName</td>
                            <td>@annotation.status</td>
                            <td>@annotation.uploadDate</td>
                        </tr>
                    }

                </tbody>

            </table>
        </div>

    </div>
}
else
{
    <!--Login-->
    <div class="content center animate flyFadeIn">

        <div class="centerContainer" style="display: flex; flex-direction: column; align-items: center">

            <div class="mainHeader" style="margin-top: 148px; justify-content: center">

                <div style="transform:scale(1.75); margin-bottom: 16px">
                    <TitleText text="Rossum Extractor" icon="icon/rossumIcon.svg" />
                </div>

            </div>

            <div style="display: flex; flex-direction:column; margin-top: 16px; gap: 16px; width: 320px;">
                <input type="text" placeholder="Username" @bind="LoginUsername"/>
                <input type="password" placeholder="Password" @bind="LoginPassword"/>
                <button @onclick="Login" style="width: 100%; height: 45px">Login</button>
            </div>

        </div>
    </div>
}

@code {

    public string LoginUsername = "";
    public string LoginPassword = "";

    protected override void OnInitialized()
    {
        //Load Key
        if (rossumExtractor.LoginCache.key == null)
        {
            if (rossumExtractor.LoadLoginCache())
            {
                LoginUsername = rossumExtractor.LoginCache.username;
                Login();
            }
        }

    }

    public void SelectAnnotation(int value)
    {
        rossumExtractor.AnnotationDataList[value].selected = !rossumExtractor.AnnotationDataList[value].selected;
    }

    public void SelectAllAnnotation()
    {
        bool select = !CheckAllAnnotationSelected();

        foreach (var annotation in rossumExtractor.AnnotationDataList)
        {
            if (Status(annotation.status) == "confirmed" || Status(annotation.status) == "review")
            {
                annotation.selected = select;
            }

        }

        StateHasChanged();
    }

    public bool CheckAllAnnotationSelected()
    {
        bool allSelected = true;

        if (rossumExtractor.AnnotationDataList.Count == 0)
            return false;

        foreach (var annotation in rossumExtractor.AnnotationDataList)
        {
            if (!annotation.selected && (Status(annotation.status) == "confirmed" || Status(annotation.status) == "review"))
            {
                allSelected = false;
                break;
            }
        }

        return allSelected;
    }

    public async void UpdateWorkspaceValue(int value)
    {
        if (value == rossumExtractor.WorkspaceValue)
            return;

        rossumExtractor.WorkspaceValue = value;
        await GetQueueListFromWorkspace();
    }

    public void UpdateQueueValue(int value)
    {
        rossumExtractor.QueueValue = value;
    }

    public string BottomStatus()
    {
        int selectedFiles = 0;
        int searchedFiles = rossumExtractor.AnnotationDataList.Count;

        foreach (var annotation in rossumExtractor.AnnotationDataList)
        {
            if (annotation.selected)
                selectedFiles++;
        }

        return $"Selected : {selectedFiles}    Searched : {searchedFiles}    {rossumExtractor.Key}";
    }

    public string Status(string status)
    {
        switch (status)
        {
            default:
                return "";
            case "Not Found":
                return "disabled";
            case "To Review":
            case "Reviewing":
                return "review";
            case "Confirmed":
            case "Exported":
            case "Exporting":
                return "confirmed";
            case "Deleted":
            case "Purged":
                return "deleted";
        }
    }

    public async void Login()
    {
        if (rossumExtractor.Key == null && (LoginUsername == "" || LoginPassword == ""))
        {
            mainLayoutService.CreateDialog("Error", $"Please fill the form.");
            return;
        }

        mainLayoutService.ShowLoading("Logging In");

        try
        {
            RossumData.LoginRespone response = await rossumService.Login(new RossumData.LoginForm { username = LoginUsername, password = LoginPassword, key = rossumExtractor.Key });

            if (response.key != null)
            {
                rossumExtractor.SaveLoginCache(LoginUsername, response.key);

                await GetWorkspaceList();
                await GetQueueListFromWorkspace();

                mainLayoutService.HideLoading();
                await Task.Delay(250);

                mainLayoutService.CreateDialog("Login Success!", "Welcome " + LoginUsername + "! <br> key : " + response.key);
                rossumExtractor.AnnotationDataList.Clear();
                rossumExtractor.LoggedIn = true;
                StateHasChanged();
            }
            else if (response.error != null)
            {
                rossumExtractor.ClearLoginCache();
                rossumExtractor.SaveLoginCache(null, null);

                mainLayoutService.HideLoading();
                await Task.Delay(250);

                mainLayoutService.CreateDialog("Login Failed", response.error);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            mainLayoutService.HideLoading();
            await Task.Delay(250);
            mainLayoutService.CreateDialog("Error", ex.ToString());
        }

    }

    public async void Logout()
    {
        mainLayoutService.ShowLoading("Loging Out");

        try
        {
            RossumData.LogoutRespone respone = await rossumService.Logout(rossumExtractor.Key);

            mainLayoutService.HideLoading();

            await Task.Delay(250);

            if (respone.loggedOut)
            {
                LoginUsername = rossumExtractor.LoginCache.username;
                rossumExtractor.SaveLoginCache(null, null);
                rossumExtractor.ClearLoginCache();
                rossumExtractor.LoggedIn = false;
            }
            else
            {
                mainLayoutService.CreateDialog("Logout Failed", respone.detail);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            mainLayoutService.HideLoading();
            await Task.Delay(250);
            mainLayoutService.CreateDialog("Error", ex.ToString());
        }

    }

    public async Task GetWorkspaceList()
    {
        mainLayoutService.ShowLoading("Getting Workspace List");

        rossumExtractor.WorkspaceDataList.Clear();
        rossumExtractor.WorkspaceValue = 0;

        try
        {
            RossumData.PagingObject<RossumData.WorkspaceResult> workspaces = await rossumService.GetWorkspaces(rossumExtractor.Key, null);

            if (workspaces != null)
            {
                //Get Workspace
                GetWorkspaceFromList(workspaces.results);

                //Get Another Workspace on other Page
                while (workspaces.pagination.next != null)
                {
                    workspaces = await rossumService.GetWorkspaces(rossumExtractor.Key, workspaces.pagination.next.ToString());

                    if (workspaces != null)
                    {
                        //Get Workspace
                        GetWorkspaceFromList(workspaces.results);
                    }

                }

            }

            StateHasChanged();
            mainLayoutService.HideLoading();
        }
        catch (Exception ex)
        {
            mainLayoutService.HideLoading();
            await Task.Delay(250);
            mainLayoutService.CreateDialog("Error", ex.ToString());
        }

    }

    public void GetWorkspaceFromList(List<RossumData.WorkspaceResult> workspaceResult)
    {
        //Get Workspace
        foreach (var workspace in workspaceResult)
        {
            //Add to Dictonary
            List<string> queues = new List<string>(workspace.queues);

            RossumData.WorkspaceData data = new RossumData.WorkspaceData { name = workspace.name, id = workspace.id, queueURL = queues };
            rossumExtractor.WorkspaceDataList.Add(data);
        }
    }

    public async Task GetQueueListFromWorkspace()
    {
        if (rossumExtractor.WorkspaceList.Count == 0)
            return;

        mainLayoutService.ShowLoading("Getting Queue List");

        rossumExtractor.QueueDataList.Clear();
        rossumExtractor.QueueValue = 0;

        //Get Selected Workspace Data
        RossumData.WorkspaceData workspaceData = rossumExtractor.WorkspaceDataList[rossumExtractor.WorkspaceValue];

        //Get Queue from Workspace
        try
        {
            for (int i = 0; i < workspaceData.queueURL.Count; i++)
            {
                string url = workspaceData.queueURL[i];
                RossumData.QueueResult queue = await rossumService.GetQueue(rossumExtractor.Key, url);

                if (queue != null && queue.status == "active")
                {
                    RossumData.QueueData queueData = new RossumData.QueueData { name = queue.name, id = queue.id };
                    rossumExtractor.QueueDataList.Add(queueData);
                }

            }

            StateHasChanged();
            mainLayoutService.HideLoading();
        }
        catch (Exception ex)
        {
            mainLayoutService.HideLoading();
            await Task.Delay(250);
            mainLayoutService.CreateDialog("Error", ex.ToString());
        }
    }

    public async Task FindDocument()
    {

        //Listing Documents to Find
        string filters = rossumExtractor.Filter;
        filters = filters.Replace("\n", ",");
        filters = filters.Replace("\r", ",");
        filters = filters.Replace("\t", ",");
        string[] filterToFind = filters.Split(',');
        filterToFind = filterToFind.Distinct().ToArray();

        if (filterToFind.Length == 0 || (filterToFind.Length > 0 && filterToFind[0] == ""))
        {
            mainLayoutService.CreateDialog("Error", "Fill the search form.");
            return;
        }

        mainLayoutService.ShowLoading("Searching Document");
        rossumExtractor.AnnotationDataList.Clear();

        try
        {
            foreach (var filter in filterToFind)
            {
                if (filter == "")
                    continue;

                RossumData.PagingObject<RossumData.DocumentResult> documents = await rossumService.GetDocumentByFileName(filter + ".pdf", rossumExtractor.Key);

                if (documents == null)
                {
                    continue;
                }

                if (documents.results.Count == 0)
                {
                    //Add to List
                    AddEmptyAnnotation(filter);
                    continue;
                }

                foreach (var document in documents.results)
                {
                    RossumData.AnnotationResult annotation = await rossumService.GetAnnotation(document.annotations[0], rossumExtractor.Key);

                    //Check Annotaiton Queue Match
                    string queueString = annotation.queue.Replace(rossumService.GetBaseAddress() + "queues/", string.Empty);

                    if (queueString != rossumExtractor.QueueDataList[rossumExtractor.QueueValue].id.ToString())
                    {
                        //Add to List
                        AddEmptyAnnotation(filter);
                        continue;
                    }

                    //New Annotation Data
                    RossumData.AnnotationData data = new RossumData.AnnotationData
                        {
                            id = annotation.id,
                            docID = document.id,
                            fileName = filter,
                            status = ToUpperEveryWord(annotation.status.Replace("_", " ")),
                            uploadDate = DateTime.Parse(document.created_at.ToString()).ToLocalTime().ToString()
                        };

                    //Add to List
                    rossumExtractor.AnnotationDataList.Add(data);

                    StateHasChanged();
                }

            }

            mainLayoutService.HideLoading();
        }
        catch (Exception ex)
        {
            mainLayoutService.HideLoading();
            await Task.Delay(250);
            mainLayoutService.CreateDialog("Error", ex.ToString());
        }

    }

    private void AddEmptyAnnotation(string name)
    {
        //New Annotation Data
        RossumData.AnnotationData data = new RossumData.AnnotationData
            {
                fileName = name,
                status = "Not Found",
                uploadDate = "-"
            };

        //Add to List
        rossumExtractor.AnnotationDataList.Add(data);
        StateHasChanged();
    }

    public string ToUpperEveryWord(string s)
    {
        // Check for empty string.
        if (string.IsNullOrEmpty(s))
        {
            return string.Empty;
        }

        var words = s.Split(' ');

        var t = "";
        foreach (var word in words)
        {
            t += char.ToUpper(word[0]) + word.Substring(1) + ' ';
        }
        return t.Trim();
    }

}