@page "/Rossum"
@inject MainLayoutService mainLayoutService;
@inject IRossumService rossumService;
@inject RossumExtractorService  rossumExtractor; 
@using MattTools.Data;
@using System.Diagnostics;


@if (rossumExtractor.Key != null)
{
    <!--Bottom Text-->
    <div class="bottomRightText">
        <p>@rossumExtractor.Key</p>
    </div>

    
    <div class="content animate flyFadeIn">

        <!--Header-->
        <div class="mainHeader" style="margin-top: 32px;">
            <TitleText icon="icon/rossumIcon.svg" text="Rossum Extractor"/>
            <div class="flexHorizontal" style="gap: 8px">
                <p style="margin-right: 8px">@rossumExtractor.LoginCache.username</p>
                <button @onclick="Logout">Log Out</button>
            </div>
        </div>

        <div class="sidePanel">
            <label>Workspace</label>
            <Dropdown Item="@(rossumExtractor.WorkspaceList)" Value="@(rossumExtractor.WorkspaceValue)" OnChangeValue="UpdateWorkspaceValue" />
            <label>Queue</label>
            <Dropdown Item="@(rossumExtractor.QueueList)" Value="@(rossumExtractor.QueueValue)" OnChangeValue="UpdateQueueValue" />
            <label>Filter</label>
            <div class="textareaContainer" style="width: 100%; height: 128px;">
                <textarea style="height: 128px; width: 100%; resize: none;" />
                <div class="textareaFocus"></div>
            </div>
            <button style="width: 100%; height: 44px;">Search</button>
            <button style="width: 100%; height: 44px;">Extract Json</button>
            <button style="width: 100%; height: 44px;">Extract Pdf</button>
        </div>

        <div class="listPanel">
            <table>

                <thead>
                    <tr>
                        <th>No</th>
                        <th>Name</th>
                        <th>Status</th>
                        <th>Uploaded At</th>
                    </tr>
                </thead>

                <tbody>

                    @for (int i = 0; i < 32; i++)
                    {
                        <tr>
                            <td>@(i + 1)</td>
                            <td>3030658131</td>
                            <td>Confirmed</td>
                            <td>7/31/2023 2:35:34 PM</td>
                        </tr>
                    }

                </tbody>

            </table>
        </div>

    </div>
}
else
{
    <!--Login-->
    <div class="content center animate flyFadeIn">

        <div class="centerContainer" style="display: flex; flex-direction: column; align-items: center">

            <div class="mainHeader" style="margin-top: 148px; justify-content: center">

                <div style="transform:scale(1.75); margin-bottom: 16px">
                    <TitleText text="Rossum Extractor" icon="icon/rossumIcon.svg" />
                </div>

            </div>

            <div style="display: flex; flex-direction:column; margin-top: 16px; gap: 16px; width: 320px;">
                <input type="text" placeholder="Username" @bind="LoginUsername"/>
                <input type="password" placeholder="Password" @bind="LoginPassword"/>
                <button @onclick="Login" style="width: 100%; height: 45px">Login</button>
            </div>

        </div>
    </div>
}

@code {

    public string LoginUsername = "";
    public string LoginPassword = "";

    protected override void OnInitialized()
    {
        //Load Key
        if (rossumExtractor.LoginCache.key == null)
        {
            if (rossumExtractor.LoadLoginCache())
            {
                LoginUsername = rossumExtractor.LoginCache.username;
                Login();
            }
        }

    }

    public async void UpdateWorkspaceValue(int value)
    {
        if (value == rossumExtractor.WorkspaceValue)
            return;

        rossumExtractor.WorkspaceValue = value;
        await GetQueueListFromWorkspace();
    }

    public void UpdateQueueValue(int value)
    {
        rossumExtractor.QueueValue = value;
    }

    public async void Login()
    {
        if (rossumExtractor.Key == null && (LoginUsername == "" || LoginPassword == ""))
        {
            mainLayoutService.CreateDialog("Error", $"Please fill the form.");
            return;
        }

        mainLayoutService.ShowLoading("Logging In");

        RossumData.LoginRespone response = await rossumService.Login(new RossumData.LoginForm { username = LoginUsername, password = LoginPassword, key = rossumExtractor.Key });

        if (response.key != null)
        {
            rossumExtractor.SaveLoginCache(LoginUsername, response.key);

            await GetWorkspaceList();
            await GetQueueListFromWorkspace();

            mainLayoutService.HideLoading();
            await Task.Delay(250);

            mainLayoutService.CreateDialog("Login Success!", "Welcome " + LoginUsername + "! <br> key : " + response.key);
            StateHasChanged();
        }
        else if (response.error != null)
        {
            rossumExtractor.SaveLoginCache(null, null);

            mainLayoutService.HideLoading();
            await Task.Delay(250);

            mainLayoutService.CreateDialog("Login Failed", response.error);
        }

    }

    public async void Logout()
    {
        mainLayoutService.ShowLoading("Loging Out");

        RossumData.LogoutRespone respone = await rossumService.Logout(rossumExtractor.Key);

        mainLayoutService.HideLoading();

        await Task.Delay(250);

        if (respone.loggedOut)
        {
            LoginUsername = rossumExtractor.LoginCache.username;
            rossumExtractor.SaveLoginCache(null, null);
            rossumExtractor.ClearLoginCache();
        }
        else
        {
            mainLayoutService.CreateDialog("Logout Failed", respone.detail);
        }

        StateHasChanged();

    }

    public async Task GetWorkspaceList()
    {
        mainLayoutService.ShowLoading("Getting Workspace List");

        rossumExtractor.WorkspaceDataList.Clear();
        rossumExtractor.WorkspaceValue = 0;

        RossumData.PagingObject<RossumData.WorkspaceResult> workspaces = await rossumService.GetWorkspaces(rossumExtractor.Key, null);

        if (workspaces != null)
        {
            //Get Workspace
            GetWorkspaceFromList(workspaces.results);

            //Get Another Workspace on other Page
            while (workspaces.pagination.next != null)
            {
                workspaces = await rossumService.GetWorkspaces(rossumExtractor.Key, workspaces.pagination.next.ToString());

                if (workspaces != null)
                {
                    //Get Workspace
                    GetWorkspaceFromList(workspaces.results);
                }

            }

        }

        StateHasChanged();
        mainLayoutService.HideLoading();
    }

    public void GetWorkspaceFromList(List<RossumData.WorkspaceResult> workspaceResult)
    {
        //Get Workspace
        foreach (var workspace in workspaceResult)
        {
            //Add to Dictonary
            List<string> queues = new List<string>(workspace.queues);

            RossumData.WorkspaceData data = new RossumData.WorkspaceData { name = workspace.name, id = workspace.id, queueURL = queues };
            rossumExtractor.WorkspaceDataList.Add(data);
        }
    }

    public async Task GetQueueListFromWorkspace()
    {
        if (rossumExtractor.WorkspaceList.Count == 0)
            return;

        mainLayoutService.ShowLoading("Getting Queue List");

        rossumExtractor.QueueDataList.Clear();
        rossumExtractor.QueueValue = 0;

        //Get Selected Workspace Data
        RossumData.WorkspaceData workspaceData = rossumExtractor.WorkspaceDataList[rossumExtractor.WorkspaceValue];

        //Get Queue from Workspace
        for (int i = 0; i < workspaceData.queueURL.Count; i++)
        {
            string url = workspaceData.queueURL[i];
            RossumData.QueueResult queue = await rossumService.GetQueue(rossumExtractor.Key, url);

            if (queue != null && queue.status == "active")
            {
                RossumData.QueueData queueData = new RossumData.QueueData { name = queue.name, id = queue.id };
                rossumExtractor.QueueDataList.Add(queueData);   
            }

        }

        StateHasChanged();

        mainLayoutService.HideLoading();
    }

}